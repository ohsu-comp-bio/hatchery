/*
 * Hatchery API
 *
 * Workspace service for launching and interacting with containers.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ContainerStateDetail struct {

	Running *ContainerStateDetailRunning `json:"running,omitempty"`

	Waiting *ContainerStateDetailWaiting `json:"waiting,omitempty"`

	Terminated *ContainerStateDetailTerminated `json:"terminated,omitempty"`
}

// AssertContainerStateDetailRequired checks if the required fields are not zero-ed
func AssertContainerStateDetailRequired(obj ContainerStateDetail) error {
	if obj.Running != nil {
		if err := AssertContainerStateDetailRunningRequired(*obj.Running); err != nil {
			return err
		}
	}
	if obj.Waiting != nil {
		if err := AssertContainerStateDetailWaitingRequired(*obj.Waiting); err != nil {
			return err
		}
	}
	if obj.Terminated != nil {
		if err := AssertContainerStateDetailTerminatedRequired(*obj.Terminated); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseContainerStateDetailRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ContainerStateDetail (e.g. [][]ContainerStateDetail), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseContainerStateDetailRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aContainerStateDetail, ok := obj.(ContainerStateDetail)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertContainerStateDetailRequired(aContainerStateDetail)
	})
}
